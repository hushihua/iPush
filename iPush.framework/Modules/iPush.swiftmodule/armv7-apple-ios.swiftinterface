// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iPush
import CommonCrypto
import CoreFoundation
import Dispatch
import Foundation
import Security
import Swift
import SystemConfiguration
import UIKit
@_exported import iPush
import zlib
public struct CMHTTPRequestError : Swift.Error {
  public enum HttpErrorType {
    case NetworkErrror
    case LogicFail
    case DataError
    case Logout
    case ParamError
    public static func == (a: iPush.CMHTTPRequestError.HttpErrorType, b: iPush.CMHTTPRequestError.HttpErrorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let type: iPush.CMHTTPRequestError.HttpErrorType
  public let msg: Swift.String
  public init(type: iPush.CMHTTPRequestError.HttpErrorType, msg: Swift.String)
}
public typealias HandlerBlock = (Foundation.Data?, Swift.Error?) -> (Swift.Void)
@objc @_inheritsConvenienceInitializers open class CMHttpClient : ObjectiveC.NSObject {
  open func doGet(urlString: Swift.String, header: Swift.Dictionary<Swift.String, Swift.String>?, params: Swift.String, handler: @escaping iPush.HandlerBlock)
  open func doPost(urlString: Swift.String, header: Swift.Dictionary<Swift.String, Swift.String>?, params: Swift.String?, handler: @escaping iPush.HandlerBlock)
  @objc override dynamic public init()
  @objc deinit
}
extension CMHttpClient {
  public func removeTaskInfo(key: Swift.String)
  public func saveTaskInfo(key: Swift.String, dataTask: Foundation.URLSessionDataTask?)
  public func getTaskInfo(key: Swift.String, handler: (Foundation.URLSessionDataTask?) -> (Swift.Void))
}
public let WebsocketDidConnectNotification: Swift.String
public let WebsocketDidDisconnectNotification: Swift.String
public let WebsocketDisconnectionErrorKeyName: Swift.String
public enum PUErrorType {
  case LogicError
  case NetworkError
  case None
  public static func == (a: iPush.PUErrorType, b: iPush.PUErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class PHResponse<T> : ObjectiveC.NSObject {
  public var data: T?
  public var isSuccess: Swift.Bool
  public var msg: Swift.String?
  public var errorType: iPush.PUErrorType
  public init(data: T?, result: Swift.Bool, msg: Swift.String?, errorType: iPush.PUErrorType = .None)
  public init(data: T)
  public init(msg: Swift.String?, errorType: iPush.PUErrorType = .LogicError)
  public init(data: T?, msg: Swift.String?, errorType: iPush.PUErrorType = .LogicError)
  @objc override dynamic public init()
  @objc deinit
}
public var CU_PRINT_LOG_ENABLE: Swift.Bool
public func LOG(_ items: Any...)
@objc public protocol PushCmdDelegate {
  @objc func onReceiveCmd(item: iPush.PHCMDItem)
}
@objc public protocol PushNotificationDelegate {
  @objc func didReceive(notification: UserNotifications.UNNotification)
  @objc func willPresent(notification: UserNotifications.UNNotification, completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc func didReceiveRemoteNotification(userInfo: [Swift.AnyHashable : Any])
}
@_inheritsConvenienceInitializers @objc public class PushApi : ObjectiveC.NSObject {
  @objc public static func getInstance() -> iPush.PushApi
  weak public var delegate: iPush.PushCmdDelegate?
  public var DEBUG: Swift.Int {
    get
    set
  }
  public var RegisterUid: Swift.String? {
    get
  }
  @objc public func initSDK(appKey: Swift.String)
  @objc public func addPushHandler(handler: iPush.PushNotificationDelegate)
  public func registerUID(handler: @escaping (iPush.PHResponse<Swift.String>) -> Swift.Void)
  public func pushToken(data: Foundation.Data, test: Swift.Bool? = nil, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  @objc public func debugEnable(_ debug: Swift.Int)
  @objc public func generateRUId(handler: @escaping (Foundation.NSString?) -> Swift.Void)
  @objc public func pushToken(data: Foundation.Data, handler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension PushApi {
  @objc dynamic public func registerNotification(application: UIKit.UIApplication, delegate: UserNotifications.UNUserNotificationCenterDelegate)
  public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse)
  public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  public func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any])
}
extension PushApi : iPush.PHSocketHandler {
  public func onEventHandler(notification: iPush.PHCMDItem)
}
@objc @_inheritsConvenienceInitializers public class PHCMD : ObjectiveC.NSObject {
  public class func parseToObject(item: [Swift.String : Any]) -> iPush.PHCMD?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PHCMDItem : ObjectiveC.NSObject {
  public var type: Swift.Int?
  public var data: Any?
  public var title: Swift.String?
  public var content: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JSONTranslater {
  public enum JSONTranslaterError : Swift.Error {
    case TypeError
    public static func == (a: iPush.JSONTranslater.JSONTranslaterError, b: iPush.JSONTranslater.JSONTranslaterError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public class func toNSDictionary(any: Any?, throwEnable: Swift.Bool = false) throws -> Foundation.NSDictionary
  public class func toDictionary<T, U>(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Dictionary<T, U> where T : Swift.Hashable
  public class func toNSArray(any: Any?, throwEnable: Swift.Bool = false) throws -> Foundation.NSArray
  public class func toArray<T>(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Array<T>
  public class func toInt(any: Any?, defValue: Swift.Int = 0, throwEnable: Swift.Bool = false) throws -> Swift.Int
  public class func toInt64(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Int64
  public class func toInt32(any: Any?) -> Swift.Int32?
  public class func toFloat(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Float
  public class func toDouble(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Double
  public class func toBoolean(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.Bool
  public class func toString(any: Any?, throwEnable: Swift.Bool = false) throws -> Swift.String
  public class func DictionaryToJson(dict: Swift.Dictionary<Swift.String, Any>, throwEnable: Swift.Bool = false) throws -> Swift.String?
  public class func JsonToDictionary(data: Foundation.Data, throwEnable: Swift.Bool = false) throws -> Swift.Dictionary<Swift.String, Any>?
  public class func JsonToArray(data: Foundation.Data, throwEnable: Swift.Bool = false) throws -> Swift.Array<Any>?
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (iPush.Reachability) -> ()
  public typealias NetworkUnreachable = (iPush.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: iPush.Reachability.NetworkStatus, b: iPush.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: iPush.Reachability.Connection, b: iPush.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: iPush.Reachability.NetworkReachable?
  public var whenUnreachable: iPush.Reachability.NetworkUnreachable?
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: iPush.Reachability.Connection {
    get
  }
  public var connection: iPush.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public protocol PHSocketHandler {
  func onEventHandler(notification: iPush.PHCMDItem)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PHSocket : ObjectiveC.NSObject {
  public class func getInstance() -> iPush.PHSocket
  public func startConnect(url: Swift.String)
  public func reconnect()
  public func close()
  public func sendMessage(param: [Swift.String : Any])
  public func sendMessage(msg: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConstantUtil : ObjectiveC.NSObject {
  public static var UDID: Swift.String? {
    get
    set
  }
  public static var UUID: Swift.String {
    get
  }
  public static var AppVersion: Swift.String {
    get
  }
  public static var BundleId: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetworkObserver : ObjectiveC.NSObject {
  public class func getInstance() -> iPush.NetworkObserver
  final public let reachability: iPush.Reachability
  public func networkEnable() -> Swift.Bool
  public func startMonitor()
  public func stopMonitor()
  public func addObserver(target: Any, selector: ObjectiveC.Selector)
  public func removeObserver(target: Any)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PHHttpClient : iPush.CMHttpClient {
  open func getCommonParams() -> Swift.Dictionary<Swift.String, Swift.String>
  open func doGet(urlString: Swift.String, header: Swift.Dictionary<Swift.String, Swift.String>? = nil, params: Swift.Dictionary<Swift.String, Any>, log: Swift.Bool = true, handler: @escaping iPush.HandlerBlock)
  open func doPost(urlString: Swift.String, header: Swift.Dictionary<Swift.String, Swift.String>? = nil, params: Swift.Dictionary<Swift.String, Any>, log: Swift.Bool = true, handler: @escaping iPush.HandlerBlock)
  open func requestPost(requestUrl: Swift.String, params: Swift.Dictionary<Swift.String, Any>, handler: @escaping (iPush.PHResponse<Any>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension PHHttpClient {
  public func launchTranslateError() -> Swift.String
  public func launchTranslateNetError() -> Swift.String
  public func foramtToCurlWithParam(headParam: Swift.Dictionary<Swift.String, Swift.String>?, param: Swift.String, urlStr: Swift.String?) -> Swift.String
  public func formatJsonStr(jsonStr: Swift.String?) -> Swift.String?
}
extension PHSocket : iPush.WebSocketManagerDelegate {
  public func addEventHandler(handler: iPush.PHSocketHandler, type: Swift.Int)
  public func onConnectOn(socket: iPush.WebSocketManager)
  public func onDisconnect()
  public func onReceiveMessage(message: Swift.String)
}
public protocol WebSocketManagerDelegate : ObjectiveC.NSObjectProtocol {
  func onConnectOn(socket: iPush.WebSocketManager)
  func onDisconnect()
  func onReceiveMessage(message: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class WebSocketManager : ObjectiveC.NSObject {
  weak public var delegate: iPush.WebSocketManagerDelegate?
  public func startConnect(url: Swift.String)
  public func sendMessage(message: Swift.String)
  public func disconnect()
  @objc override dynamic public init()
  @objc deinit
}
extension iPush.CMHTTPRequestError.HttpErrorType : Swift.Equatable {}
extension iPush.CMHTTPRequestError.HttpErrorType : Swift.Hashable {}
extension iPush.PUErrorType : Swift.Equatable {}
extension iPush.PUErrorType : Swift.Hashable {}
extension iPush.JSONTranslater.JSONTranslaterError : Swift.Equatable {}
extension iPush.JSONTranslater.JSONTranslaterError : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension iPush.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension iPush.Reachability.NetworkStatus : Swift.Hashable {}
extension iPush.Reachability.Connection : Swift.Equatable {}
extension iPush.Reachability.Connection : Swift.Hashable {}
